name: Build WoPan Web

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 不要因为一个失败就取消其他构建
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          # 暂时禁用macOS构建，专注于Windows版本
          # - os: macos-latest
          #   platform: macos
          #   arch: x64
          # - os: macos-14
          #   platform: macos
          #   arch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        echo "Python version:"
        python --version
        echo "Installed packages:"
        pip list

    - name: Build executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        echo "Building for ${{ matrix.platform }}-${{ matrix.arch }}"
        echo "Current directory:"
        pwd
        echo "Files in current directory:"
        dir
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "Starting PyInstaller build with spec file..."
        pyinstaller build.spec --clean --log-level DEBUG
        if (-not (Test-Path "dist/WoPanWeb.exe")) {
          echo "Spec build failed, trying Windows build script..."
          python build_windows.py
        }
        echo "Build completed, checking dist directory:"
        if (Test-Path "dist") { dir dist } else { echo "dist directory not found" }

    - name: Build executable (macOS/Linux)
      if: matrix.platform != 'windows'
      run: |
        echo "Building for ${{ matrix.platform }}-${{ matrix.arch }}"
        echo "Current directory:"
        pwd
        echo "Files in current directory:"
        ls -la
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "Starting PyInstaller build with spec file..."
        pyinstaller build.spec --clean --log-level DEBUG || echo "Spec build failed, trying simple build..."

        # 如果spec构建失败，尝试简单构建
        if [ ! -f "dist/WoPanWeb.exe" ] && [ ! -f "dist/WoPanWeb" ]; then
          echo "Trying simple build method..."
          python build_simple.py
        fi

        echo "Build completed, checking dist directory:"
        ls -la dist/ || echo "dist directory not found"

    - name: Create release package (Windows)
      if: matrix.platform == 'windows'
      run: |
        if (-not (Test-Path "release")) { mkdir release }
        copy dist\WoPanWeb.exe release\
        copy README_WEB.md release\
        copy requirements.txt release\
        echo "# 联通网盘Web版 - Windows版本" > release\README.txt
        echo "" >> release\README.txt
        echo "双击 WoPanWeb.exe 启动程序" >> release\README.txt
        echo "程序会自动打开浏览器并启动Web服务" >> release\README.txt

    - name: Create release package (macOS/Linux)
      if: matrix.platform != 'windows'
      run: |
        mkdir -p release
        if [ -f "dist/WoPanWeb" ]; then
          cp dist/WoPanWeb release/
          chmod +x release/WoPanWeb
        else
          echo "Error: WoPanWeb executable not found"
          ls -la dist/
          exit 1
        fi
        cp README_WEB.md release/
        cp requirements.txt release/
        echo "# 联通网盘Web版 - ${{ matrix.platform }}版本" > release/README.txt
        echo "" >> release/README.txt
        echo "运行 ./WoPanWeb 启动程序" >> release/README.txt
        echo "程序会自动打开浏览器并启动Web服务" >> release/README.txt

    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        Compress-Archive -Path release\* -DestinationPath WoPanWeb-${{ matrix.platform }}-${{ matrix.arch }}.zip

    - name: Create archive (macOS/Linux)
      if: matrix.platform != 'windows'
      run: |
        cd release
        tar -czf ../WoPanWeb-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz *

    - name: Upload artifact (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: WoPanWeb-${{ matrix.platform }}-${{ matrix.arch }}
        path: WoPanWeb-${{ matrix.platform }}-${{ matrix.arch }}.zip

    - name: Upload artifact (macOS/Linux)
      if: matrix.platform != 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: WoPanWeb-${{ matrix.platform }}-${{ matrix.arch }}
        path: WoPanWeb-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          WoPanWeb-windows-x64/*.zip
          WoPanWeb-macos-x64/*.tar.gz
          WoPanWeb-macos-arm64/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
